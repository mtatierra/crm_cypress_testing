"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.URLExt = void 0;
class URLExt {
    static portOrDefault(url) {
        if (url.port) {
            return +url.port;
        }
        switch (url.protocol) {
            case "http:":
                return 80;
            case "https:":
                return 443;
            case "ws":
                return 80;
            case "wss":
                return 443;
            case "ftp:":
                return 21;
        }
        throw new Error("Cannot return default port for unknown protocol " + url.protocol);
    }
    /**
     * Removes IPv6 quotes from hostnames
     *
     * @param {URL} url Url
     * @returns {string} Hostname without IPv6 quotes
     */
    static unescapeHostname(url) {
        return url.hostname.replace("[", "").replace("]", "");
    }
    /**
     * Converts an AddressInfo object (from a listen callback) to an URL
     *
     * @param {AddressInfo} addressInfo AddressInfo
     * @param {string} protocol Communication protocol, such as http:
     * @returns {URL} URL
     */
    static addressInfoToUrl(addressInfo, protocol) {
        if (addressInfo.family === 6 || // Node 18 uses numeric family value
            addressInfo.family === "IPv6") {
            return new URL(`${protocol}//[${addressInfo.address}]:${addressInfo.port}`);
        }
        return new URL(`${protocol}//${addressInfo.address}:${addressInfo.port}`);
    }
}
exports.URLExt = URLExt;
