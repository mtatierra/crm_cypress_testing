"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigStore = void 0;
const inversify_1 = require("inversify");
const url_ext_1 = require("../util/url.ext");
let ConfigStore = class ConfigStore {
    constructor() {
        this.ntlmHosts = {};
        this.ntlmHostWildcards = {};
        this.ntlmSsoHosts = [];
        this.ntlmSsoHostWildcards = [];
    }
    updateConfig(config) {
        const nonWildcards = config.ntlmHosts.filter((s) => s.indexOf("*") === -1);
        const wildcards = config.ntlmHosts.filter((s) => s.indexOf("*") !== -1);
        nonWildcards.forEach((host) => {
            const hostConfig = {
                ntlmHost: new URL(`http://${host}`).host,
                username: config.username,
                password: config.password,
                domain: config.domain ? config.domain.toUpperCase() : undefined,
                workstation: config.workstation
                    ? config.workstation.toUpperCase()
                    : undefined,
                ntlmVersion: config.ntlmVersion,
            };
            this.ntlmHosts[host] = hostConfig;
        });
        wildcards.forEach((wildcard) => {
            const hostConfig = {
                ntlmHost: wildcard,
                ntlmHostRegex: new RegExp(`^${wildcard.replace(/\*/g, ".*")}$`, "i"),
                username: config.username,
                password: config.password,
                domain: config.domain ? config.domain.toUpperCase() : undefined,
                workstation: config.workstation
                    ? config.workstation.toUpperCase()
                    : undefined,
                ntlmVersion: config.ntlmVersion,
            };
            this.ntlmHostWildcards[wildcard] = hostConfig;
        });
    }
    exists(ntlmHostUrl) {
        return this.get(ntlmHostUrl) !== undefined;
    }
    get(ntlmHostUrl) {
        // Match first with port
        const ntlmHostWithPort = ntlmHostUrl.hostname + ":" + url_ext_1.URLExt.portOrDefault(ntlmHostUrl);
        if (ntlmHostWithPort in this.ntlmHosts) {
            return this.ntlmHosts[ntlmHostWithPort];
        }
        // Then without port
        if (ntlmHostUrl.hostname in this.ntlmHosts) {
            return this.ntlmHosts[ntlmHostUrl.hostname];
        }
        // Wildcard match only without port
        return Object.values(this.ntlmHostWildcards).find((hostConfig) => hostConfig.ntlmHostRegex.test(ntlmHostUrl.hostname));
    }
    setSsoConfig(ntlmSsoConfig) {
        const nonWildcards = ntlmSsoConfig.ntlmHosts.filter((s) => s.indexOf("*") === -1);
        const wildcards = ntlmSsoConfig.ntlmHosts.filter((s) => s.indexOf("*") !== -1);
        this.ntlmSsoHosts = nonWildcards;
        this.ntlmSsoHostWildcards = wildcards.map((s) => new RegExp(`^${s.replace(/\*/g, ".*")}$`, "i"));
    }
    useSso(ntlmHostUrl) {
        return this.existsSso(ntlmHostUrl) && this.exists(ntlmHostUrl) === false;
    }
    existsOrUseSso(ntlmHostUrl) {
        return this.exists(ntlmHostUrl) || this.existsSso(ntlmHostUrl);
    }
    existsSso(ntlmHostUrl) {
        // Match with and without port
        if (this.ntlmSsoHosts.includes(ntlmHostUrl.host) ||
            this.ntlmSsoHosts.includes(ntlmHostUrl.hostname)) {
            return true;
        }
        // Wildcard match only without port
        return (this.ntlmSsoHostWildcards.findIndex((re) => re.test(ntlmHostUrl.hostname)) !== -1);
    }
    clear() {
        this.ntlmHosts = {};
        this.ntlmSsoHosts = [];
        this.ntlmSsoHostWildcards = [];
    }
};
ConfigStore = __decorate([
    (0, inversify_1.injectable)()
], ConfigStore);
exports.ConfigStore = ConfigStore;
