"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpstreamProxyManager = void 0;
const inversify_1 = require("inversify");
const url_ext_1 = require("../util/url.ext");
let UpstreamProxyManager = class UpstreamProxyManager {
    init(httpProxy, httpsProxy, noProxy) {
        if (httpProxy && this.validateUpstreamProxy(httpProxy, "HTTP_PROXY")) {
            this._httpProxyUrl = new URL(httpProxy);
        }
        if (httpsProxy && this.validateUpstreamProxy(httpsProxy, "HTTPS_PROXY")) {
            this._httpsProxyUrl = new URL(httpsProxy);
        }
        if (noProxy) {
            // Might be a comma separated list of hosts
            this._noProxyUrls = noProxy.split(",").map((item) => {
                item = item.trim();
                if (item.indexOf("*") === -1) {
                    item = new URL(`http://${item}`).host; // Trim away default ports
                }
                return item;
            });
        }
    }
    validateUpstreamProxy(proxyUrl, parameterName) {
        const proxyParsed = new URL(proxyUrl);
        if (!proxyParsed.protocol ||
            !proxyParsed.hostname ||
            proxyParsed.pathname !== "/") {
            throw new Error("Invalid " +
                parameterName +
                " argument. " +
                "It must be a complete URL without path. Example: http://proxy.acme.com:8080");
        }
        return true;
    }
    matchWithWildcardRule(str, rule) {
        return new RegExp("^" + rule.split("*").join(".*") + "$").test(str);
    }
    targetInNoProxy(ntlmHostUrl) {
        if (!this._noProxyUrls) {
            return false;
        }
        let match = false;
        this._noProxyUrls.forEach((rule) => {
            if (this.matchWithWildcardRule(ntlmHostUrl.hostname, rule)) {
                match = true;
            }
        });
        return match;
    }
    setUpstreamProxyConfig(ntlmHostUrl, isSSL, agentOptions) {
        let proxyUrl = null;
        if (this.targetInNoProxy(ntlmHostUrl)) {
            return false;
        }
        if (isSSL && this._httpsProxyUrl) {
            proxyUrl = this._httpsProxyUrl;
        }
        else if (this._httpProxyUrl) {
            // Use HTTP_PROXY also for HTTPS if no HTTPS_PROXY is defined
            proxyUrl = this._httpProxyUrl;
        }
        if (proxyUrl) {
            if (isSSL) {
                agentOptions.proxy = {
                    host: url_ext_1.URLExt.unescapeHostname(proxyUrl),
                    port: url_ext_1.URLExt.portOrDefault(proxyUrl),
                    secureProxy: proxyUrl.protocol === "https:",
                };
            }
            else {
                agentOptions.host = url_ext_1.URLExt.unescapeHostname(proxyUrl);
                agentOptions.port = url_ext_1.URLExt.portOrDefault(proxyUrl);
                agentOptions.secureProxy = proxyUrl.protocol === "https:";
            }
            return true;
        }
        return false;
    }
    hasHttpsUpstreamProxy(ntlmHostUrl) {
        return ((this._httpProxyUrl !== undefined || this._httpsProxyUrl !== undefined) &&
            this.targetInNoProxy(ntlmHostUrl) === false);
    }
    setUpstreamProxyHeaders(headers) {
        if (headers["connection"] === "keep-alive") {
            headers["proxy-connection"] = "keep-alive";
        }
    }
    reset() {
        this._httpProxyUrl = undefined;
        this._httpsProxyUrl = undefined;
        this._noProxyUrls = undefined;
    }
};
UpstreamProxyManager = __decorate([
    (0, inversify_1.injectable)()
], UpstreamProxyManager);
exports.UpstreamProxyManager = UpstreamProxyManager;
