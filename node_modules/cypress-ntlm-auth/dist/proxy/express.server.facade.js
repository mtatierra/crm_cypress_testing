"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpressServerFacade = void 0;
const express_1 = __importDefault(require("express"));
const body_parser_1 = __importDefault(require("body-parser"));
const inversify_1 = require("inversify");
const url_ext_1 = require("../util/url.ext");
let ExpressServerFacade = class ExpressServerFacade {
    constructor() {
        this._app = (0, express_1.default)();
        this._app.use(body_parser_1.default.json());
    }
    use(path, ...handlers) {
        this._app.use(path, handlers);
        return this;
    }
    listen(port) {
        return new Promise((resolve, reject) => {
            this._listener = this._app.listen(port, "127.0.0.1");
            this._listener.on("listening", () => {
                const addressInfo = this._listener.address();
                resolve(url_ext_1.URLExt.addressInfoToUrl(addressInfo, "http:"));
            });
            this._listener.on("error", reject);
        });
    }
    close() {
        return new Promise((resolve, reject) => {
            if (this._listener) {
                this._listener.close((err) => {
                    this._listener = undefined;
                    if (err) {
                        return reject(err);
                    }
                    resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
};
ExpressServerFacade = __decorate([
    (0, inversify_1.injectable)(),
    __metadata("design:paramtypes", [])
], ExpressServerFacade);
exports.ExpressServerFacade = ExpressServerFacade;
