"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environment = void 0;
const inversify_1 = require("inversify");
const https_validation_level_enum_1 = require("../models/https.validation.level.enum");
const url_ext_1 = require("../util/url.ext");
let Environment = class Environment {
    constructor() {
        this._loopbackDisable = "<-loopback>";
    }
    get configApiUrl() {
        return process.env.CYPRESS_NTLM_AUTH_API;
    }
    set configApiUrl(configApiUrl) {
        process.env.CYPRESS_NTLM_AUTH_API = configApiUrl;
    }
    get configApiPort() {
        return this.portFromUrl(this.configApiUrl);
    }
    get ntlmProxyUrl() {
        return process.env.CYPRESS_NTLM_AUTH_PROXY;
    }
    set ntlmProxyUrl(ntlmProxyUrl) {
        process.env.CYPRESS_NTLM_AUTH_PROXY = ntlmProxyUrl;
    }
    get ntlmProxyPort() {
        return this.portFromUrl(this.ntlmProxyUrl);
    }
    get httpProxy() {
        return process.env.HTTP_PROXY;
    }
    set httpProxy(httpProxy) {
        process.env.HTTP_PROXY = httpProxy;
    }
    get httpsProxy() {
        return process.env.HTTPS_PROXY;
    }
    set httpsProxy(httpsProxy) {
        process.env.HTTPS_PROXY = httpsProxy;
    }
    get noProxy() {
        return process.env.NO_PROXY;
    }
    set noProxy(noProxy) {
        process.env.NO_PROXY = noProxy;
    }
    get httpsValidation() {
        return this.parseHttpsValidation(process.env.HTTPS_VALIDATION);
    }
    configureForCypress(ports) {
        this.configApiUrl = ports.configApiUrl;
        this.ntlmProxyUrl = ports.ntlmProxyUrl;
        this.httpProxy = ports.ntlmProxyUrl;
        this.httpsProxy = ports.ntlmProxyUrl;
        this.noProxy = this._loopbackDisable;
    }
    delete(key) {
        delete process.env[key];
    }
    validateEnvironmentUrls() {
        if (this.configApiUrl) {
            try {
                new URL(this.configApiUrl);
            }
            catch (err) {
                throw new Error("cypress-ntlm-auth: URLs in environment variables must be complete (start with http://)." +
                    " Invalid URL (CYPRESS_NTLM_AUTH_API): " + this.configApiUrl);
            }
        }
        if (this.ntlmProxyUrl) {
            try {
                new URL(this.ntlmProxyUrl);
            }
            catch (err) {
                throw new Error("cypress-ntlm-auth: URLs in environment variables must be complete (start with http://)." +
                    " Invalid URL (CYPRESS_NTLM_AUTH_PROXY): " + this.ntlmProxyUrl);
            }
        }
    }
    portFromUrl(value) {
        if (!value) {
            return undefined;
        }
        const parsed = new URL(value);
        return url_ext_1.URLExt.portOrDefault(parsed);
    }
    nodeTlsRejectUnauthorized() {
        if (process.env.NODE_TLS_REJECT_UNAUTHORIZED) {
            return process.env.NODE_TLS_REJECT_UNAUTHORIZED !== "0";
        }
        return true;
    }
    parseHttpsValidation(httpsValidationEnv) {
        if (!this.nodeTlsRejectUnauthorized()) {
            console.warn("cypress-ntlm-auth: NODE_TLS_REJECT_UNAUTHORIZED is set to 0. " +
                "This disables all certificate checks and overrides any HTTPS_VALIDATION setting.");
            return https_validation_level_enum_1.HttpsValidationLevel.Unsafe;
        }
        if (!httpsValidationEnv) {
            return https_validation_level_enum_1.HttpsValidationLevel.Warn;
        }
        switch (httpsValidationEnv.toLowerCase()) {
            case "strict":
                return https_validation_level_enum_1.HttpsValidationLevel.Strict;
            case "warn":
                return https_validation_level_enum_1.HttpsValidationLevel.Warn;
            case "unsafe":
                return https_validation_level_enum_1.HttpsValidationLevel.Unsafe;
            default: {
                console.error("cypress-ntlm-auth: Invalid HTTPS_VALIDATION value (" +
                    httpsValidationEnv +
                    '). Valid values are "strict", "warn" or "unsafe". Applying default value "warn"');
                return https_validation_level_enum_1.HttpsValidationLevel.Warn;
            }
        }
    }
};
Environment = __decorate([
    (0, inversify_1.injectable)()
], Environment);
exports.Environment = Environment;
